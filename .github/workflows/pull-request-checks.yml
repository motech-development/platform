name: Pull request checks

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Node version
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Generate modules cache key
        run: ./scripts/checksum.sh ./modules.txt modules

      - name: Generate packages cache key
        run: ./scripts/checksum.sh ./packages.txt packages

      - name: Restore Node modules
        id: node-modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ./node_modules
            ./applications/*/*/node_modules
            ./packages/*/node_modules
          key: ${{ runner.os }}-modules-v1-${{ hashFiles('**/modules.txt') }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: Restore packages
        id: packages
        uses: actions/cache@v2
        with:
          path: ./packages/*/lib
          key: ${{ runner.os }}-packages-v1-${{ hashFiles('**/packages.txt') }}
          restore-keys: |
            ${{ runner.os }}-packages-

      - name: Restore cache
        id: cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cache-v1-${{ hashFiles('**/modules.txt') }}
          restore-keys: |
            ${{ runner.os }}-cache-

      - name: Install dependencies
        if: steps.node-modules.outputs.cache-hit != 'true' || steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build packages
        if: steps.packages.outputs.cache-hit != 'true' || steps.node-modules.outputs.cache-hit != 'true'
        run: npm run package

      - name: Lint code
        run: npm run lint

  deploy-accounts-api:
    runs-on: ubuntu-latest

    needs: setup

    env:
      AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN_DEV }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      STAGE: develop

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Node version
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Generate modules cache key
        run: ./scripts/checksum.sh ./modules.txt modules

      - name: Generate packages cache key
        run: ./scripts/checksum.sh ./packages.txt packages

      - name: Restore Node modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ./node_modules
            ./applications/*/*/node_modules
            ./packages/*/node_modules
          key: ${{ runner.os }}-modules-v1-${{ hashFiles('**/modules.txt') }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: Restore packages
        uses: actions/cache@v2
        with:
          path: ./packages/*/lib
          key: ${{ runner.os }}-packages-v1-${{ hashFiles('**/packages.txt') }}
          restore-keys: |
            ${{ runner.os }}-packages-

      - name: Restore env vars
        uses: actions/cache@v2
        with:
          path: ./applications/accounts/client/.env.production
          key: ${{ runner.os }}-accounts-client-env-vars-pr-v1-${{ hashFiles('**/packages.txt') }}
          restore-keys: |
            ${{ runner.os }}-accounts-client-env-vars-pr-

      - name: Deploy
        run: npm run deploy -- --scope=@accounts/api -- -- --stage $STAGE --issuer $AUTH0_DOMAIN

  smoke-test:
    runs-on: ubuntu-latest

    needs: deploy-accounts-api

    strategy:
      fail-fast: false
      matrix:
        containers:
          - 1
          - 2

    env:
      CYPRESS_AUDIENCE: ${{ secrets.ACCOUNTS_APP_AUDIENCE }}
      CYPRESS_AUTH_URL: ${{ secrets.CYPRESS_AUTH_URL }}
      CYPRESS_CLIENT_ID: ${{ secrets.ACCOUNTS_APP_CLIENT_ID_DEV }}
      CYPRESS_PASSWORD: ${{ secrets.CYPRESS_PASSWORD }}
      CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      CYPRESS_USERNAME: ${{ secrets.CYPRESS_USERNAME }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REACT_APP_AUTH0_AUDIENCE: ${{ secrets.ACCOUNTS_APP_AUDIENCE }}
      REACT_APP_AUTH0_CLIENT_ID: ${{ secrets.ACCOUNTS_APP_CLIENT_ID_DEV }}
      REACT_APP_AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN_DEV }}
      REACT_APP_GA: ${{ secrets.GA_ACCOUNTS_DEV }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Node version
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Generate modules cache key
        run: ./scripts/checksum.sh ./modules.txt modules

      - name: Generate packages cache key
        run: ./scripts/checksum.sh ./packages.txt packages

      - name: Restore Node modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ./node_modules
            ./applications/*/*/node_modules
            ./packages/*/node_modules
          key: ${{ runner.os }}-modules-v1-${{ hashFiles('**/modules.txt') }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: Restore packages
        uses: actions/cache@v2
        with:
          path: ./packages/*/lib
          key: ${{ runner.os }}-packages-v1-${{ hashFiles('**/packages.txt') }}
          restore-keys: |
            ${{ runner.os }}-packages-

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cache-v1-${{ hashFiles('**/modules.txt') }}
          restore-keys: |
            ${{ runner.os }}-cache-

      - name: Restore env vars
        uses: actions/cache@v2
        with:
          path: ./applications/accounts/client/.env.production
          key: ${{ runner.os }}-accounts-client-env-vars-pr-v1-${{ hashFiles('**/packages.txt') }}
          restore-keys: |
            ${{ runner.os }}-accounts-client-env-vars-pr-

      - name: Build client
        run: npm run build -- --scope=@accounts/client

      - name: Smoke tests
        uses: cypress-io/github-action@v2
        with:
          command: npm run e2e:ci -- --scope=@accounts/client -- -- --record --parallel
          config: defaultCommandTimeout=20000
          install: false
          start: npx serve -s ./applications/accounts/client/build --listen 3000
          wait-on: http://localhost:3000
