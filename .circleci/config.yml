version: 2.1

attach_workspace: &attach_workspace
  attach_workspace:
    at: ~/repo

generate_cache_key: &generate_cache_key
  run:
    command: ./scripts/checksum.sh ./checksum.txt
    name: Generate cache key

restore_cache: &restore_cache
  restore_cache:
    keys:
      - accounts-dependencies-v1-{{ checksum "./checksum.txt" }}
      - accounts-dependencies-v1-

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  codecov: codecov/codecov@1.0.2
  sonarcloud: sonarsource/sonarcloud@1.0.1

jobs:
  setup:
    docker:
      - image: circleci/node:12.13
    working_directory: ~/repo
    steps:
      - checkout
      - <<: *generate_cache_key
      - <<: *restore_cache
      - run:
          command: npm i
          name: Install dependencies
      - run:
          command: npm run build -- --scope=@motech-development/auth
          name: Build Auth package
      - run:
          command: npm run build -- --scope=@motech-development/breeze-ui
          name: Build Breeze UI package
      - run:
          command: npm run lint
          name: Lint code
      - save_cache:
          key: accounts-dependencies-v1-{{ checksum "./checksum.txt" }}
          paths:
            - node_modules
            - applications/accounts-api/node_modules
            - applications/accounts-client/node_modules
            - applications/accounts-data/node_modules
            - applications/accounts-infrastructure/node_modules
            - applications/id/node_modules
            - applications/infrastructure/node_modules
            - packages/auth/node_modules
            - packages/breeze-ui/node_modules
      - persist_to_workspace:
          paths:
            - ./checksum.txt
            - ./packages/*/lib/*
          root: .

  unit-test:
    docker:
      - image: circleci/node:12.13
    working_directory: ~/repo
    steps:
      - checkout
      - <<: *attach_workspace
      - <<: *restore_cache
      - run:
          command: npm run test:ci
          name: Unit test
      - store_test_results:
          path: reports/junit
      - codecov/upload:
          file: ./applications/accounts-client/coverage/coverage-final.json
      - codecov/upload:
          file: ./packages/auth/coverage/coverage-final.json
      - codecov/upload:
          file: ./packages/breeze-ui/coverage/coverage-final.json
      - sonarcloud/scan

  build-accounts-client:
    docker:
      - image: circleci/node:12.13
    working_directory: ~/repo
    steps:
      - checkout
      - <<: *attach_workspace
      - <<: *restore_cache
      - run:
          command: npm run build -- --scope=@motech-development/accounts-client
          name: Build client
      - persist_to_workspace:
          paths:
            - ./applications/accounts-client/build
          root: .

  deploy-accounts-infrastructure:
    docker:
      - image: circleci/node:12.13
    working_directory: ~/repo
    steps:
      - checkout
      - <<: *attach_workspace
      - <<: *restore_cache
      - run:
          command: npm run deploy -- --scope=@motech-development/accounts-infrastructure -- -- --stage production --domain-name $PROD_DOMAIN
          name: Deploy accounts infrastructure
          no_output_timeout: 60m

  deploy-accounts-client:
    docker:
      - image: circleci/node:12.13
    working_directory: ~/repo
    steps:
      - checkout
      - <<: *attach_workspace
      - <<: *restore_cache
      - run:
          command: npm run deploy -- --scope=@motech-development/accounts-client -- -- --stage production --domain-name $PROD_DOMAIN
          name: Deploy accounts client

  deploy-accounts-data:
    docker:
      - image: circleci/node:12.13
    working_directory: ~/repo
    steps:
      - checkout
      - <<: *attach_workspace
      - <<: *restore_cache
      - run:
          command: npm run deploy -- --scope=@motech-development/accounts-data -- -- --stage production
          name: Deploy accounts data infrastructure

  deploy-accounts-api:
    docker:
      - image: circleci/node:12.13
    working_directory: ~/repo
    steps:
      - checkout
      - <<: *attach_workspace
      - <<: *restore_cache
      - run:
          command: npm run deploy -- --scope=@motech-development/accounts-api -- -- --stage production
          name: Deploy accounts API

  deploy-auth0:
    docker:
      - image: circleci/node:12.13
    working_directory: ~/repo
    steps:
      - checkout
      - <<: *attach_workspace
      - <<: *restore_cache
      - run:
          command: npm run deploy -- --scope=@motech-development/id
          name: Deploy to Auth0

  deploy-infrastructure:
    docker:
      - image: circleci/node:12.13
    working_directory: ~/repo
    steps:
      - checkout
      - <<: *attach_workspace
      - <<: *restore_cache
      - run:
          command: npm run deploy -- --scope=@motech-development/infrastructure -- -- --stage production --domain-name $PROD_DOMAIN
          name: Deploy infrastructure

  deploy-storybook:
    docker:
      - image: circleci/node:12.13
    working_directory: ~/repo
    steps:
      - checkout
      - <<: *attach_workspace
      - <<: *restore_cache
      - run:
          command: npm run deploy -- --scope=@motech-development/breeze-ui
          name: Deploy storybook

workflows:
  version: 2

  build-test-deploy:
    jobs:
      - setup:
          filters:
            branches:
              ignore:
                - gh-pages

      - unit-test:
          context: SonarCloud
          requires:
            - setup

      - build-accounts-client:
          requires:
            - unit-test

      - deploy-infrastructure:
          filters:
            branches:
              only: master
          requires:
            - unit-test

      - deploy-accounts-infrastructure:
          filters:
            branches:
              only: master
          requires:
            - deploy-infrastructure

      - deploy-accounts-data:
          requires:
            - unit-test
          # TODO: Re-enable when sorted
          # filters:
          #     branches:
          #       only: master
          # requires:
          #   - deploy-infrastructure

      - deploy-accounts-api:
          requires:
            - deploy-accounts-data

      - deploy-auth0:
          filters:
            branches:
              only: master
          requires:
            - unit-test

      - deploy-accounts-client:
          filters:
            branches:
              only: master
          requires:
            - deploy-accounts-infrastructure
            - build-accounts-client

      - deploy-auth0:
          filters:
            branches:
              only: master
          requires:
            - unit-test

      - deploy-storybook:
          filters:
            branches:
              only: master
          requires:
            - unit-test
