service:
  name: ${opt:appName, 'open-banking'}
  publish: false

provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'local'}
  stackName: ${self:custom.prefix}

package:
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  prefix: ${self:service}-${self:provider.stage}

  serverless-offline:
    httpPort: 4000
    useChildProcesses: true

  dynamodb:
    start:
      migrate: true
      seed: true

    seed:
      banks:
        sources:
          # TODO: Should use Ref
          - table: ${self:custom.prefix}
            sources: [./seed/banks.json]
    stages:
      - local

functions:
  authPost:
    handler: src/handlers/auth.post
    events:
      - http:
          authorizer: aws_iam
          method: post
          path: api/v1/auth

  banksGet:
    handler: src/handlers/banks.get
    events:
      - http:
          authorizer: aws_iam
          method: get
          path: api/v1/banks
    environment:
      # TODO: Should use Ref
      TABLE: ${self:custom.prefix}
    role: LambdaFunctionRole

  userPost:
    handler: src/handlers/users.post
    events:
      - http:
          authorizer: aws_iam
          method: post
          path: api/v1/users

resources:
  Resources:
    ApplicationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}
        AttributeDefinitions:
          - AttributeName: data
            AttributeType: S
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: sk-data-index
            KeySchema:
              - AttributeName: sk
                KeyType: HASH
              - AttributeName: data
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-lambda-function-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-lambda-function-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                  Resource:
                    - !GetAtt ApplicationTable.Arn
                    - !Join
                      - ''
                      - - !GetAtt ApplicationTable.Arn
                        - '/index/sk-data-index'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource:
                    - 'arn:aws:logs:*:*:*'

  Outputs:
    OpenBankingApiEndpoint:
      Description: Open banking API endpoint
      Value: !Join
        - ''
        - - 'https://'
          - !Ref ApiGatewayRestApi
          - '.execute-api.${self:provider.region}.amazonaws.com'
      Export:
        Name: ${self:provider.stage}-OpenBankingApiEndpoint
