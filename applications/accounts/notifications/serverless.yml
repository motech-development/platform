service: accounts-notifications

provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  runtime: nodejs18.x
  stage: ${opt:stage, 'local'}
  stackName: ${self:custom.prefix}-notifications
  deploymentBucket:
    name: ${self:service}-deployment-bucket

package:
  individually: true

plugins:
  - serverless-deployment-bucket
  - serverless-webpack
  - serverless-prune-plugin

custom:
  prefix: accounts-${self:provider.stage}

  prune:
    automatic: true
    includeLayers: true
    number: 1

  webpack:
    includeModules:
      nodeModulesRelativeDir: ../../../
    packager: yarn
    packagerOptions:
      noFrozenLockfile: true

functions:
  CreateNotification:
    handler: src/handlers/create-notification.handler
    role: LambdaFunctionRole
    events:
      - http:
          authorizer: aws_iam
          path: api/v1/notifications
          method: post
    environment:
      TABLE: !ImportValue ${self:provider.stage}-AccountsApplicationTable

resources:
  Resources:
    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-notifications-lambda-function-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - !ImportValue ${self:provider.stage}-AccountsApplicationTableArn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource:
                    - 'arn:aws:logs:*:*:*'

  Outputs:
    NotificationsApiEndpoint:
      Description: Notifications API endpoint
      Value: !Join
        - ''
        - - 'https://'
          - !Ref ApiGatewayRestApi
          - '.execute-api.'
          - !Ref AWS::Region
          - '.amazonaws.com'
      Export:
        Name: ${self:provider.stage}-NotificationsApiEndpoint

    NotificationsApiArn:
      Description: Notifications API ARN
      Value: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref ApiGatewayRestApi
          - '/*'
      Export:
        Name: ${self:provider.stage}-NotificationsApiArn
