service: accounts-data

provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  runtime: nodejs18.x
  stage: ${opt:stage, 'local'}
  stackName: ${self:custom.prefix}-data
  deploymentBucket:
    name: ${self:service}-deployment-bucket

package:
  individually: true

plugins:
  - serverless-deployment-bucket
  - serverless-webpack
  - serverless-prune-plugin

custom:
  prefix: accounts-${self:provider.stage}

  prune:
    automatic: true
    includeLayers: true
    number: 1

  webpack:
    excludeRegex: 'node_modules/@aws-sdk'
    includeModules:
      nodeModulesRelativeDir: ../../../
    packager: yarn
    packagerOptions:
      noFrozenLockfile: true

functions:
  Attachments:
    handler: src/attachments.handler
    role: DataLambdaFunctionRole
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ApplicationTable.StreamArn
    environment:
      ATTACHMENT_QUEUE: !ImportValue ${self:provider.stage}-DeleteFileQueueUrl

  ClearAttachments:
    handler: src/clear-attachments.handler
    events:
      - sqs:
          arn: !ImportValue ${self:provider.stage}-AntiVirusFailureQueueArn
    role: DataLambdaFunctionRole
    environment:
      BUCKET: !ImportValue ${self:provider.stage}-StorageUploadBucket
      TABLE: !Ref ApplicationTable

  PublishTransactions:
    handler: src/publish-transactions.handler
    role: DataLambdaFunctionRole
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ApplicationTable.StreamArn
    environment:
      TABLE: !Ref ApplicationTable

  ScheduleTransactions:
    handler: src/schedule-transactions.handler
    role: DataLambdaFunctionRole
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ApplicationTable.StreamArn
    environment:
      TABLE: !Ref ApplicationTable

  Transactions:
    handler: src/transactions.handler
    role: DataLambdaFunctionRole
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ApplicationTable.StreamArn
    environment:
      TABLE: !Ref ApplicationTable

  TransformTransactions:
    handler: src/transform-transactions.handler
    role: DataLambdaFunctionRole
    timeout: 900
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ApplicationTable.StreamArn
    environment:
      TABLE: !Ref ApplicationTable

  Typeahead:
    handler: src/typeahead.handler
    role: DataLambdaFunctionRole
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ApplicationTable.StreamArn
    environment:
      TABLE: !Ref ApplicationTable

resources:
  Resources:
    ApplicationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-application
        AttributeDefinitions:
          - AttributeName: data
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: __typename
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: __typename
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: __typename-data-index
            KeySchema:
              - AttributeName: __typename
                KeyType: HASH
              - AttributeName: data
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    DataLambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-data-lambda-function-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeStream
                    - dynamodb:GetItem
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:ListStreams
                    - dynamodb:PutItem
                    - dynamodb:Query
                    - dynamodb:UpdateItem
                  Resource:
                    - !GetAtt ApplicationTable.Arn
                    - !Join
                      - ''
                      - - !GetAtt ApplicationTable.Arn
                        - '/stream/*'
                    - !Join
                      - ''
                      - - !GetAtt ApplicationTable.Arn
                        - '/index/__typename-data-index'
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - !ImportValue ${self:provider.stage}-DeleteFileQueueArn
                - Effect: Allow
                  Action:
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                    - sqs:ReceiveMessage
                  Resource:
                    - !ImportValue ${self:provider.stage}-AntiVirusFailureQueueArn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource:
                    - 'arn:aws:logs:*:*:*'

  Outputs:
    AccountsApplicationTable:
      Description: Accounts application DynamoDB table
      Value: !Ref ApplicationTable
      Export:
        Name: ${self:provider.stage}-AccountsApplicationTable

    AccountsApplicationTableArn:
      Description: Accounts application DynamoDB table ARN
      Value: !GetAtt ApplicationTable.Arn
      Export:
        Name: ${self:provider.stage}-AccountsApplicationTableArn

    AccountsApplicationTableStreamArn:
      Description: Accounts application DynamoDB table stream ARN
      Value: !GetAtt ApplicationTable.StreamArn
      Export:
        Name: ${self:provider.stage}-AccountsApplicationTableStreamArn
