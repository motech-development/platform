service: accounts-api

provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  runtime: nodejs16.x
  stage: ${opt:stage, 'local'}
  stackName: ${self:custom.prefix}-api
  deploymentBucket:
    name: ${self:service}-deployment-bucket

package:
  individually: true

plugins:
  - serverless-deployment-bucket
  - serverless-appsync-plugin
  - serverless-webpack
  - serverless-prune-plugin
  - '@motech-development/serverless-outputs-env'

custom:
  prefix: accounts-${self:provider.stage}

  prune:
    automatic: true
    includeLayers: true
    number: 1

  resourceName: Accounts${self:provider.stage}GraphQlApi

  oidc:
    issuer: https://${env:AUTH0_DOMAIN}/

  outputs:
    files:
      - ../client/.env.production
    env:
      AccountsApiUrl: REACT_APP_APPSYNC_URL
      AWS_REGION: REACT_APP_AWS_REGION

  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
      forceInclude:
        - cross-fetch
      nodeModulesRelativeDir: ../../../
    packager: yarn
    packagerOptions:
      noFrozenLockfile: true

appSync:
  name: ${self:custom.prefix}

  authentication:
    type: OPENID_CONNECT
    config:
      issuer: ${self:custom.oidc.issuer}

  additionalAuthentications:
    - type: AWS_IAM

  logging:
    loggingRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
    level: ERROR

  resolvers:
    Query.getBalance:
      dataSource: Lambda
      request: balance/getBalance/Query.getBalance.req.vtl
      response: balance/getBalance/Query.getBalance.res.vtl

    Query.getBanks:
      dataSource: OpenBanking
      request: bank/getBanks/Query.getBanks.req.vtl
      response: bank/getBanks/Query.getBanks.res.vtl

    Query.getBankAccounts:
      kind: PIPELINE
      functions:
        - bankSettings
        - getBankAccounts
      request: bank/getBankAccounts/Query.getBankAccounts.req.vtl
      response: bank/getBankAccounts/Query.getBankAccounts.res.vtl

    Mutation.bankCallback:
      dataSource: Resolver
      request: bank/bankCallback/Mutation.bankCallback.req.vtl
      response: bank/bankCallback/Mutation.bankCallback.res.vtl

    Mutation.createBankConnection:
      dataSource: OpenBanking
      request: bank/createBankConnection/Mutation.createBankConnection.req.vtl
      response: bank/createBankConnection/Mutation.createBankConnection.res.vtl

    Mutation.deleteBankConnection:
      kind: PIPELINE
      functions:
        - bankSettings
        - unlinkBank
        - resetBankSettings
      request: bank/deleteBankConnection/Mutation.deleteBankConnection.req.vtl
      response: bank/deleteBankConnection/Mutation.deleteBankConnection.res.vtl

    Query.getBankSettings:
      kind: PIPELINE
      functions:
        - bankSettings
      request: bank/getBankSettings/Query.getBankSettings.req.vtl
      response: bank/getBankSettings/Query.getBankSettings.res.vtl

    Mutation.updateBankSettings:
      dataSource: Data
      request: bank/updateBankSettings/Mutation.updateBankSettings.req.vtl
      response: bank/updateBankSettings/Mutation.updateBankSettings.res.vtl

    Mutation.createClient:
      kind: PIPELINE
      functions:
        - address
        - addressFiltering
        - telephone
        - getClientCompanyId
        - createClient
      request: client/createClient/Mutation.createClient.req.vtl
      response: client/createClient/Mutation.createClient.res.vtl

    Mutation.deleteClient:
      dataSource: Data
      request: client/deleteClient/Mutation.deleteClient.req.vtl
      response: client/deleteClient/Mutation.deleteClient.res.vtl

    Mutation.updateClient:
      kind: PIPELINE
      functions:
        - address
        - addressFiltering
        - telephone
        - getClientCompanyId
        - updateClient
      request: client/updateClient/Mutation.updateClient.req.vtl
      response: client/updateClient/Mutation.updateClient.res.vtl

    Query.getClient:
      dataSource: Data
      request: client/getClient/Query.getClient.req.vtl
      response: client/getClient/Query.getClient.res.vtl

    Query.getClients:
      dataSource: Data
      request: client/getClients/Query.getClients.req.vtl
      response: client/getClients/Query.getClients.res.vtl

    Mutation.createCompany:
      kind: PIPELINE
      functions:
        - address
        - addressFiltering
        - bank
        - companyNumber
        - telephone
        - vatRegistration
        - createCompany
      request: company/createCompany/Mutation.createCompany.req.vtl
      response: company/createCompany/Mutation.createCompany.res.vtl

    Mutation.deleteCompany:
      kind: PIPELINE
      functions:
        - deleteCompany
        - queueCompanyDelete
      request: company/deleteCompany/Mutation.deleteCompany.req.vtl
      response: company/deleteCompany/Mutation.deleteCompany.res.vtl

    Mutation.updateCompany:
      kind: PIPELINE
      functions:
        - address
        - addressFiltering
        - bank
        - companyNumber
        - telephone
        - updateCompany
      request: company/updateCompany/Mutation.updateCompany.req.vtl
      response: company/updateCompany/Mutation.updateCompany.res.vtl

    Query.getCompanies:
      dataSource: Data
      request: company/getCompanies/Query.getCompanies.req.vtl
      response: company/getCompanies/Query.getCompanies.res.vtl

    Query.getCompany:
      kind: PIPELINE
      functions:
        - getCompany
      request: company/getCompany/Query.getCompany.req.vtl
      response: company/getCompany/Query.getCompany.res.vtl

    Query.getNotifications:
      dataSource: Data
      request: notifications/getNotifications/Query.getNotifications.req.vtl
      response: notifications/getNotifications/Query.getNotifications.res.vtl

    Mutation.markAsRead:
      dataSource: Data
      request: notifications/markAsRead/Mutation.markAsRead.req.vtl
      response: notifications/markAsRead/Mutation.markAsRead.res.vtl

    Mutation.notificationBeacon:
      dataSource: Resolver
      request: notifications/notificationBeacon/Mutation.notificationBeacon.req.vtl
      response: notifications/notificationBeacon/Mutation.notificationBeacon.res.vtl

    Mutation.createReport:
      kind: PIPELINE
      functions:
        - getCompany
        - createReport
      request: reports/createReport/Mutation.createReport.req.vtl
      response: reports/createReport/Mutation.createReport.res.vtl

    Query.getReports:
      dataSource: Data
      request: reports/getReports/Query.getReports.req.vtl
      response: reports/getReports/Query.getReports.res.vtl

    Mutation.updateSettings:
      kind: PIPELINE
      functions:
        - vatRegistration
        - updateSettings
      request: settings/updateSettings/Mutation.updateSettings.req.vtl
      response: settings/updateSettings/Mutation.updateSettings.res.vtl

    Query.getSettings:
      dataSource: Data
      request: settings/getSettings/Query.getSettings.req.vtl
      response: settings/getSettings/Query.getSettings.res.vtl

    Mutation.addTransaction:
      dataSource: Data
      request: transaction/addTransaction/Mutation.addTransaction.req.vtl
      response: transaction/addTransaction/Mutation.addTransaction.res.vtl

    Mutation.deleteTransaction:
      dataSource: Data
      request: transaction/deleteTransaction/Mutation.deleteTransaction.req.vtl
      response: transaction/deleteTransaction/Mutation.deleteTransaction.res.vtl

    Query.getTransaction:
      dataSource: Data
      request: transaction/getTransaction/Query.getTransaction.req.vtl
      response: transaction/getTransaction/Query.getTransaction.res.vtl

    Query.getTransactions:
      dataSource: Data
      request: transaction/getTransactions/Query.getTransactions.req.vtl
      response: transaction/getTransactions/Query.getTransactions.res.vtl

    Mutation.updateTransaction:
      dataSource: Data
      request: transaction/updateTransaction/Mutation.updateTransaction.req.vtl
      response: transaction/updateTransaction/Mutation.updateTransaction.res.vtl

    Mutation.deleteFile:
      kind: PIPELINE
      functions:
        - getCompany
        - deleteFile
      request: storage/deleteFile/Mutation.deleteFile.req.vtl
      response: storage/deleteFile/Mutation.deleteFile.res.vtl

    Query.requestDownload:
      kind: PIPELINE
      functions:
        - getCompany
        - requestDownload
      request: storage/requestDownload/Query.requestDownload.req.vtl
      response: storage/requestDownload/Query.requestDownload.res.vtl

    Mutation.requestUpload:
      kind: PIPELINE
      functions:
        - getCompany
        - requestUpload
      request: storage/requestUpload/Mutation.requestUpload.req.vtl
      response: storage/requestUpload/Mutation.requestUpload.res.vtl

    Query.getTypeahead:
      dataSource: Data
      request: typeahead/getTypeahead/Query.getTypeahead.req.vtl
      response: typeahead/getTypeahead/Query.getTypeahead.res.vtl

  schema:
    - schema/address.graphql
    - schema/balance.graphql
    - schema/bank.graphql
    - schema/client.graphql
    - schema/company.graphql
    - schema/contact.graphql
    - schema/expense-category.graphql
    - schema/notification.graphql
    - schema/report.graphql
    - schema/schema.graphql
    - schema/settings.graphql
    - schema/storage.graphql
    - schema/transaction.graphql
    - schema/typeahead.graphql
    - schema/vat-settings.graphql

  pipelineFunctions:
    # Validation
    address:
      dataSource: Resolver
      request: shared/address/Pipeline.address.req.vtl
      response: shared/address/Pipeline.address.res.vtl

    bank:
      dataSource: Resolver
      request: shared/bank/Pipeline.bank.req.vtl
      response: shared/bank/Pipeline.bank.res.vtl

    companyNumber:
      dataSource: Resolver
      request: shared/companyNumber/Pipeline.companyNumber.req.vtl
      response: shared/companyNumber/Pipeline.companyNumber.res.vtl

    telephone:
      dataSource: Resolver
      request: shared/telephone/Pipeline.telephone.req.vtl
      response: shared/telephone/Pipeline.telephone.res.vtl

    vatRegistration:
      dataSource: Resolver
      request: shared/vatRegistration/Pipeline.vatRegistration.req.vtl
      response: shared/vatRegistration/Pipeline.vatRegistration.res.vtl

    # Utilities
    addressFiltering:
      dataSource: Resolver
      request: shared/addressFiltering/Pipeline.addressFiltering.req.vtl
      response: shared/addressFiltering/Pipeline.addressFiltering.res.vtl

    bankSettings:
      dataSource: Data
      request: shared/bankSettings/Pipeline.bankSettings.req.vtl
      response: shared/bankSettings/Pipeline.bankSettings.res.vtl

    getCompany:
      dataSource: Data
      request: shared/getCompany/Pipeline.getCompany.req.vtl
      response: shared/getCompany/Pipeline.getCompany.res.vtl

    # Bank
    getBankAccounts:
      dataSource: OpenBanking
      request: bank/getBankAccounts/Pipeline.getBankAccounts.req.vtl
      response: bank/getBankAccounts/Pipeline.getBankAccounts.res.vtl

    resetBankSettings:
      dataSource: Data
      request: bank/deleteBankConnection/Pipeline.resetBankSettings.req.vtl
      response: bank/deleteBankConnection/Pipeline.resetBankSettings.res.vtl

    unlinkBank:
      dataSource: OpenBanking
      request: bank/deleteBankConnection/Pipeline.unlinkBank.req.vtl
      response: bank/deleteBankConnection/Pipeline.unlinkBank.res.vtl

    # Clients
    createClient:
      dataSource: Data
      request: client/createClient/Pipeline.createClient.req.vtl
      response: client/createClient/Pipeline.createClient.res.vtl

    getClientCompanyId:
      dataSource: Data
      request: client/shared/getClientCompanyId/Pipeline.getClientCompanyId.req.vtl
      response: client/shared/getClientCompanyId/Pipeline.getClientCompanyId.res.vtl

    updateClient:
      dataSource: Data
      request: client/updateClient/Pipeline.updateClient.req.vtl
      response: client/updateClient/Pipeline.updateClient.res.vtl

    # Companies
    createCompany:
      dataSource: Data
      request: company/createCompany/Pipeline.createCompany.req.vtl
      response: company/createCompany/Pipeline.createCompany.res.vtl

    deleteCompany:
      dataSource: Data
      request: company/deleteCompany/Pipeline.deleteCompany.req.vtl
      response: company/deleteCompany/Pipeline.deleteCompany.res.vtl

    queueCompanyDelete:
      dataSource: Queue
      request: company/deleteCompany/Pipeline.queueCompanyDelete.req.vtl
      response: company/deleteCompany/Pipeline.queueCompanyDelete.res.vtl

    updateCompany:
      dataSource: Data
      request: company/updateCompany/Pipeline.updateCompany.req.vtl
      response: company/updateCompany/Pipeline.updateCompany.res.vtl

    # Reports
    createReport:
      dataSource: Reports
      request: reports/createReport/Pipeline.createReport.req.vtl
      response: reports/createReport/Pipeline.createReport.res.vtl

    # Settings
    updateSettings:
      dataSource: Data
      request: settings/updateSettings/Pipeline.updateSettings.req.vtl
      response: settings/updateSettings/Pipeline.updateSettings.res.vtl

    # Storage
    deleteFile:
      dataSource: Queue
      request: storage/deleteFile/Pipeline.deleteFile.req.vtl
      response: storage/deleteFile/Pipeline.deleteFile.res.vtl

    requestDownload:
      dataSource: StorageUpload
      request: storage/requestDownload/Pipeline.requestDownload.req.vtl
      response: storage/requestDownload/Pipeline.requestDownload.res.vtl

    requestUpload:
      dataSource: StorageUpload
      request: storage/requestUpload/Pipeline.requestUpload.req.vtl
      response: storage/requestUpload/Pipeline.requestUpload.res.vtl

  dataSources:
    NONE:
      name: Resolver

    Data:
      type: AMAZON_DYNAMODB
      description: Application table
      config:
        tableName: !ImportValue ${self:provider.stage}-AccountsApplicationTable
        serviceRoleArn: !GetAtt AppSyncDynamoDbServiceRole.Arn

    Lambda:
      type: AWS_LAMBDA
      config:
        lambdaFunctionArn: !GetAtt LambdaDataSourceLambdaFunction.Arn
        serviceRoleArn: !GetAtt AppSyncLambdaServiceRole.Arn

    OpenBanking:
      type: HTTP
      config:
        endpoint: !ImportValue ${self:provider.stage}-OpenBankingApiEndpoint
        authorizationConfig:
          authorizationType: AWS_IAM
          awsIamConfig:
            signingRegion: !Ref AWS::Region
            signingServiceName: execute-api
        serviceRoleArn: !GetAtt AppSyncOpenBankingServiceRole.Arn

    Reports:
      type: HTTP
      config:
        endpoint: !ImportValue ${self:provider.stage}-AccountsReportsApiEndpoint
        authorizationConfig:
          authorizationType: AWS_IAM
          awsIamConfig:
            signingRegion: !Ref AWS::Region
            signingServiceName: execute-api
        serviceRoleArn: !GetAtt AppSyncReportsServiceRole.Arn

    StorageUpload:
      type: HTTP
      config:
        endpoint: !ImportValue ${self:provider.stage}-StorageUploadApiEndpoint
        authorizationConfig:
          authorizationType: AWS_IAM
          awsIamConfig:
            signingRegion: !Ref AWS::Region
            signingServiceName: execute-api
        serviceRoleArn: !GetAtt AppSyncStorageUploadServiceRole.Arn

    Queue:
      type: HTTP
      config:
        endpoint: !Join
          - ''
          - - 'https://sqs.'
            - !Ref AWS::Region
            - '.amazonaws.com/'
        authorizationConfig:
          authorizationType: AWS_IAM
          awsIamConfig:
            signingRegion: !Ref AWS::Region
            signingServiceName: sqs
        serviceRoleArn: !GetAtt AppSyncQueueServiceRole.Arn

  substitutions:
    appTable: !ImportValue ${self:provider.stage}-AccountsApplicationTable
    deleteFileQueue: !ImportValue ${self:provider.stage}-DeleteFileQueueUrlPath
    queue: !ImportValue ${self:provider.stage}-AccountsQueueUrl
    stage: ${self:provider.stage}

functions:
  LambdaDataSource:
    handler: src/lambda.handler
    role: LambdaDataSourceRole
    timeout: 30
    environment:
      TABLE: !ImportValue ${self:provider.stage}-AccountsApplicationTable

  PublishNotifications:
    handler: src/handlers/publish-notifications.handler
    role: PublishNotificationsRole
    events:
      - stream:
          type: dynamodb
          arn: !ImportValue ${self:provider.stage}-AccountsApplicationTableStreamArn
    environment:
      ENDPOINT:
        Fn::GetAtt:
          - ${self:custom.resourceName}
          - GraphQLUrl

resources:
  Resources:
    AppSyncOpenBankingServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-open-banking-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource: !ImportValue ${self:provider.stage}-OpenBankingApiArn

    AppSyncReportsServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-reports-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource: !ImportValue ${self:provider.stage}-AccountsReportsApiArn

    AppSyncStorageUploadServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-storage-upload-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource: !ImportValue ${self:provider.stage}-StorageUploadApiArn

    AppSyncLoggingServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-logging-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'

    AppSyncDynamoDbServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-dynamodb-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:UpdateItem
                  Resource:
                    - !ImportValue ${self:provider.stage}-AccountsApplicationTableArn
                    - !Join
                      - ''
                      - - !ImportValue ${self:provider.stage}-AccountsApplicationTableArn
                        - '/index/__typename-data-index'

    AppSyncQueueServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-queue-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - !ImportValue ${self:provider.stage}-AccountsQueueArn
                    - !ImportValue ${self:provider.stage}-DeleteFileQueueArn

    AppSyncLambdaServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-lambda-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:invokeFunction
                  Resource:
                    - !GetAtt LambdaDataSourceLambdaFunction.Arn
                    - !Join
                      - ''
                      - - !GetAtt LambdaDataSourceLambdaFunction.Arn
                        - ':*'

    LambdaDataSourceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-lambda-data-source-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:Query
                  Resource:
                    - !ImportValue ${self:provider.stage}-AccountsApplicationTableArn
                    - !Join
                      - ''
                      - - !ImportValue ${self:provider.stage}-AccountsApplicationTableArn
                        - '/index/__typename-data-index'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource:
                    - 'arn:aws:logs:*:*:*'

    PublishNotificationsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-publish-notifications-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeStream
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:ListStreams
                  Resource:
                    - !ImportValue ${self:provider.stage}-AccountsApplicationTableArn
                    - !Join
                      - ''
                      - - !ImportValue ${self:provider.stage}-AccountsApplicationTableArn
                        - '/stream/*'
                - Effect: Allow
                  Action:
                    - appsync:GraphQL
                  Resource:
                    - !Join
                      - ''
                      - - !Ref ${self:custom.resourceName}
                        - '/types/Mutation/fields/notificationBeacon'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource:
                    - 'arn:aws:logs:*:*:*'

  Outputs:
    AccountsApiUrl:
      Description: Accounts API URL
      Value:
        Fn::GetAtt:
          - ${self:custom.resourceName}
          - GraphQLUrl
