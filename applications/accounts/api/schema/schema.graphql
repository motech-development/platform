type Mutation {
  createClient(input: ClientInput!): Client!
  deleteClient(id: ID!): Client!
  updateClient(input: ClientInput!): Client!
  createCompany(input: CreateCompanyInput!): Company!
  deleteCompany(id: ID!): Company!
  updateCompany(input: CompanyInput!): Company!
  updateSettings(input: SettingsInput!): Settings!
  addTransaction(input: TransactionInput!): Transaction!
  deleteTransaction(id: ID!): Transaction!
  updateTransaction(input: TransactionInput!): Transaction!
  transactionBeacon(
    id: ID!
    owner: String!
    input: TransactionBeaconInput!
  ): Balance! @aws_iam
  requestUpload(id: ID!, input: StorageUploadInput!): StorageUpload!
  deleteFile(id: ID!, path: String!): Storage!
  notificationBeacon(id: ID!, input: NotificationInput!): Notification! @aws_iam
  markAsRead(id: ID!, input: MarkNotificationsInput!): Notifications!
  createReport(input: ReportInput!): ReportRequest!
}

type Query {
  getBalance(id: ID!): Balance!
  getClients(id: ID!, count: Int, nextToken: String): Clients!
  getClient(id: ID!): Client!
  getCompanies(id: ID!, count: Int, nextToken: String): Companies!
  getCompany(id: ID!): Company!
  getSettings(id: ID!): Settings!
  getTransaction(id: ID!): Transaction!
  getTransactions(
    id: ID!
    status: TransactionStatus!
    count: Int
    nextToken: String
  ): Transactions!
  getTypeahead(id: ID!): Typeahead!
  requestDownload(id: ID!, path: String!): StorageDownload!
  getNotifications(id: ID!, count: Int, nextToken: String): Notifications!
  getReports(id: ID!, count: Int, nextToken: String): Reports!
}

type Subscription {
  onTransaction(id: ID!, owner: String!): Balance
    @aws_subscribe(mutations: ["transactionBeacon"])
  onNotification(owner: String!): Notification
    @aws_subscribe(mutations: ["notificationBeacon"])
}

schema {
  mutation: Mutation
  query: Query
  subscription: Subscription
}
