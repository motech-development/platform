service: accounts-warm-up

provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  runtime: nodejs18.x
  stage: ${opt:stage, 'local'}
  stackName: ${self:custom.prefix}-warm-up
  deploymentBucket:
    name: ${self:service}-deployment-bucket

package:
  individually: true

plugins:
  - serverless-deployment-bucket
  - serverless-step-functions
  - serverless-webpack
  - serverless-prune-plugin

custom:
  prefix: accounts-${self:provider.stage}

  prune:
    automatic: true
    includeLayers: true
    number: 1

  webpack:
    includeModules:
      forceExclude:
        - '@aws-sdk/client-dynamodb'
        - '@aws-sdk/lib-dynamodb'
      nodeModulesRelativeDir: ../../../
    packager: yarn
    packagerOptions:
      noFrozenLockfile: true

functions:
  CheckTtl:
    handler: src/handlers/check-ttl.handler
    role: WarmUpLambdaFunctionRole
    environment:
      TABLE: !ImportValue ${self:provider.stage}-AccountsApplicationTable

  InsertTtl:
    handler: src/handlers/insert-ttl.handler
    role: WarmUpLambdaFunctionRole
    environment:
      TABLE: !ImportValue ${self:provider.stage}-AccountsApplicationTable

stepFunctions:
  validate: true
  stateMachines:
    warmUp:
      name: ${self:custom.prefix}-warm-up
      definition:
        Comment: Warm up DynamoDB TTL ahead of testing applications
        StartAt: InsertTtl
        States:
          InsertTtl:
            Type: Task
            Resource: !GetAtt InsertTtlLambdaFunction.Arn
            Next: WaitForCheck

          WaitForCheck:
            Type: Wait
            Seconds: 180
            Next: CheckTtl

          CheckTtl:
            Type: Task
            Resource: !GetAtt CheckTtlLambdaFunction.Arn
            Next: ShouldCheckTtl

          ShouldCheckTtl:
            Type: Choice
            Choices:
              - Variable: $.complete
                BooleanEquals: false
                Next: WaitForCheck
            Default: WarmUpComplete

          WarmUpComplete:
            Type: Pass
            End: true

resources:
  Resources:
    WarmUpLambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-data-lambda-function-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                  Resource:
                    - !ImportValue ${self:provider.stage}-AccountsApplicationTableArn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource:
                    - 'arn:aws:logs:*:*:*'
