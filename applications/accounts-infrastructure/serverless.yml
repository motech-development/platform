service:
  name: ${opt:appName, 'accounts'}
  publish: false

provider:
  name: aws
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'local'}
  stackName: ${self:custom.prefix}-infrastructure

package:
  individually: true

plugins:
  - serverless-webpack

custom:
  prefix: ${self:service}-${self:provider.stage}
  domainName: ${opt:domain-name}
  subDomain: ${self:service}.${self:custom.domainName}

  webpack:
    includeModules: true

functions:
  Cache:
    handler: src/handlers/cache.handler
    role: LambdaFunctionRole

resources:
  Resources:
    CacheLambdaVersion:
      Type: AWS::Lambda::Version
      Properties:
        FunctionName: !Ref CacheLambdaFunction

    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.subDomain}

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref Bucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
              Resource:
                - !Join
                  - ''
                  - - !GetAtt Bucket.Arn
                    - '/*'

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Ref Bucket

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.subDomain}
          ViewerCertificate:
            AcmCertificateArn: !ImportValue Certificate
            SslSupportMethod: sni-only
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultRootObject: /index.html
          Enabled: true
          HttpVersion: http2
          Origins:
            - DomainName: !GetAtt Bucket.DomainName
              Id: ${self:custom.prefix}-app
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    - - origin-access-identity/cloudfront/
                      - Ref: CloudFrontOriginAccessIdentity
          PriceClass: PriceClass_100
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: ${self:custom.prefix}-app
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            LambdaFunctionAssociations:
              - EventType: origin-response
                LambdaFunctionARN: !Ref CacheLambdaVersion
          # TODO: Logging
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: ''
          #   Prefix: ''

    DnsRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: !ImportValue HostedZoneId
        Name: ${self:custom.subDomain}
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt CloudFrontDistribution.DomainName

    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-infrastructure-lambda-function-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - edgelambda.amazonaws.com
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
