#set($owner = $ctx.identity.sub)
#set($data = "$owner:$ctx.args.input.name")
#set($address = {})
#set($vat = {})
#set($validPostcode = $util.matches("^([A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {1,2}[0-9][ABD-HJLN-UW-Z]{2}|GIR 0AA)$", $ctx.args.input.address.line5))
#set($validAccountNumber = $util.matches("^(\d){8}$", $ctx.args.input.bank.accountNumber))
#set($validSortCode = $util.matches("^(\d){2}-(\d){2}-(\d){2}$", $ctx.args.input.bank.sortCode))
#set($validCompanyNumber = $util.matches("^[0-9]{8}$", $ctx.args.input.companyNumber))
#set($validTelephone = $util.matches("^\(?(?:(?:0(?:0|11)\)?[\s-]?\(?|\+)44\)?[\s-]?\(?(?:0\)?[\s-]?\(?)?|0)(?:\d{2}\)?[\s-]?\d{4}[\s-]?\d{4}|\d{3}\)?[\s-]?\d{3}[\s-]?\d{3,4}|\d{4}\)?[\s-]?(?:\d{5}|\d{3}[\s-]?\d{3})|\d{5}\)?[\s-]?\d{4,5}|8(?:00[\s-]?11[\s-]?11|45[\s-]?46[\s-]?4\d))(?:(?:[\s-]?(?:x|ext\.?\s?|#)\d+)?)$", $ctx.args.input.contact.telephone))
#set($validVatRegistration = $util.matches("^([GB])*(([1-9]\d{8})|([1-9]\d{11}))$", $ctx.args.input.vatRegistration))

#if (!$ctx.args.input.address.line1 || $ctx.args.input.address.line1 == "")
  $utils.appendError("Address line 1 is required")
#end

#if (!$ctx.args.input.address.line3 || $ctx.args.input.address.line3 == "")
  $utils.appendError("Address line 3 is required")
#end

#if (!$validPostcode)
  $utils.appendError("Postcode is invalid")
#end

#if (!$validAccountNumber)
  $utils.appendError("Account number is invalid")
#end

#if (!$validSortCode)
  $utils.appendError("Sort code is invalid")
#end

#if (!$validCompanyNumber)
  $utils.appendError("Company number is invalid")
#end

#if (!$validTelephone)
  $utils.appendError("Telephone number is invalid")
#end

#if ($ctx.args.input.vat.registration != "")
  #if (!$validVatRegistration)
    $utils.appendError("VAT registration number is invalid")
  #end
#end

#foreach ($key in $ctx.args.input.address.keySet())
  #if($ctx.args.input.address.get($key) != "")
    #set($values = $address.put($key, $ctx.args.input.address.get($key)))
  #end
#end

#foreach ($key in $ctx.args.input.vat.keySet())
  #if($ctx.args.input.vat.get($key) != "")
    #set($values = $vat.put($key, $ctx.args.input.vat.get($key)))
  #end
#end

#set($input = $ctx.args.input.put("address", $address))
#set($input = $ctx.args.input.put("vat", $vat))
#set($expression = "SET")

#foreach ($key in $ctx.args.input.keySet())
  #if($ctx.args.input.get($key) != "")
    #set($expression = "$expression #${key} = :${key},")
  #end
#end

#set($expression = "$expression #data = :data, #updatedAt = :updatedAt")

{
  "version": "2017-02-28",
  "operation": "UpdateItem",
  "key" : {
    "pk": $util.dynamodb.toDynamoDBJson($ctx.args.pk),
    "sk": $util.dynamodb.toDynamoDBJson("COMPANY")
  },
  "update": {
    "expression": "$expression",
    "expressionNames": {
      "#data": "data",
      "#updatedAt": "updatedAt"
      #foreach ($key in $ctx.args.input.keySet())
        #if($ctx.args.input.get($key) != "")
          , "#${key}": "${key}"
        #end
      #end
    },
    "expressionValues": {
      ":data": $util.dynamodb.toDynamoDBJson($data),
      ":updatedAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601())
      #foreach ($key in $ctx.args.input.keySet())
        #if($ctx.args.input.get($key) != "")
          , ":${key}": $util.dynamodb.toDynamoDBJson($ctx.args.input.get($key))
        #end
      #end
    }
  },
  "condition": {
    "expression": "#owner = :owner",
    "expressionNames": {
      "#owner": "owner"
    },
    "expressionValues": {
      ":owner": $util.dynamodb.toDynamoDBJson($owner)
    }
  }
}
