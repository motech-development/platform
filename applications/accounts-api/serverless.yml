service:
  name: ${opt:appName, 'accounts'}
  publish: false

provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'local'}
  stackName: ${self:custom.prefix}-api

plugins:
  - serverless-appsync-plugin
  - '@motech-development/serverless-outputs-env'

custom:
  prefix: ${self:service}-${self:provider.stage}
  oidc:
    issuer: https://${env:REACT_APP_AUTH0_DOMAIN, ''}/

  outputs:
    files:
      - ../accounts-client/.env.production
    env:
      AccountsproductionGraphQlApiUrl: REACT_APP_APPSYNC_URL
      AWS_REGION: REACT_APP_AWS_REGION

  appSync:
    - name: ${self:custom.prefix}
      authenticationType: OPENID_CONNECT
      openIdConnectConfig:
        issuer: ${self:custom.oidc.issuer}
      logConfig:
        loggingRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
        level: ERROR
      mappingTemplates:
        - kind: PIPELINE
          type: Mutation
          field: createClient
          functions:
            - address
            - addressFiltering
            - telephone
            - getClientCompanyId
            - createClient
          request: client/createClient/Mutation.createClient.before.vtl
          response: client/createClient/Mutation.createClient.after.vtl
        - dataSource: Data
          type: Mutation
          field: deleteClient
          request: client/deleteClient/Mutation.deleteClient.req.vtl
          response: client/deleteClient/Mutation.deleteClient.res.vtl
        - kind: PIPELINE
          type: Mutation
          field: updateClient
          functions:
            - address
            - addressFiltering
            - telephone
            - getClientCompanyId
            - updateClient
          request: client/updateClient/Mutation.updateClient.before.vtl
          response: client/updateClient/Mutation.updateClient.after.vtl
        - dataSource: Data
          type: Query
          field: getClient
          request: client/getClient/Query.getClient.req.vtl
          response: client/getClient/Query.getClient.res.vtl
        - dataSource: Data
          type: Query
          field: getClients
          request: client/getClients/Query.getClients.req.vtl
          response: client/getClients/Query.getClients.res.vtl

        - kind: PIPELINE
          type: Mutation
          field: createCompany
          functions:
            - address
            - addressFiltering
            - bank
            - companyNumber
            - telephone
            - vatRegistration
            - createCompany
            - createSettings
          request: company/createCompany/Mutation.createCompany.before.vtl
          response: company/createCompany/Mutation.createCompany.after.vtl
        - dataSource: Data
          type: Mutation
          field: deleteCompany
          request: company/deleteCompany/Mutation.deleteCompany.req.vtl
          response: company/deleteCompany/Mutation.deleteCompany.res.vtl
        - kind: PIPELINE
          type: Mutation
          field: updateCompany
          functions:
            - address
            - addressFiltering
            - bank
            - companyNumber
            - telephone
            - vatRegistration
            - updateCompany
          request: company/updateCompany/Mutation.updateCompany.before.vtl
          response: company/updateCompany/Mutation.updateCompany.after.vtl
        - dataSource: Data
          type: Query
          field: getCompanies
          request: company/getCompanies/Query.getCompanies.req.vtl
          response: company/getCompanies/Query.getCompanies.res.vtl
        - dataSource: Data
          type: Query
          field: getCompany
          request: company/getCompany/Query.getCompany.req.vtl
          response: company/getCompany/Query.getCompany.res.vtl

        - dataSource: Data
          type: Mutation
          field: updateSettings
          request: settings/Mutation.updateSettings.req.vtl
          response: settings/Mutation.updateSettings.res.vtl
        - dataSource: Data
          type: Query
          field: getSettings
          request: settings/Query.getSettings.req.vtl
          response: settings/Query.getSettings.res.vtl
      schema:
        - schema/address.graphql
        - schema/bank.graphql
        - schema/client.graphql
        - schema/company.graphql
        - schema/contact.graphql
        - schema/schema.graphql
        - schema/settings.graphql
      functionConfigurations:
        # Validation
        - dataSource: Resolver
          name: address
          request: shared/address/address.req.vtl
          response: shared/address/address.res.vtl
        - dataSource: Resolver
          name: bank
          request: shared/bank/bank.req.vtl
          response: shared/bank/bank.res.vtl
        - dataSource: Resolver
          name: companyNumber
          request: shared/companyNumber/companyNumber.req.vtl
          response: shared/companyNumber/companyNumber.res.vtl
        - dataSource: Resolver
          name: telephone
          request: shared/telephone/telephone.req.vtl
          response: shared/telephone/telephone.res.vtl
        - dataSource: Resolver
          name: vatRegistration
          request: shared/vatRegistration/vatRegistration.req.vtl
          response: shared/vatRegistration/vatRegistration.res.vtl

        # Utilities
        - dataSource: Resolver
          name: addressFiltering
          request: shared/addressFiltering/addressFiltering.req.vtl
          response: shared/addressFiltering/addressFiltering.res.vtl

        # Clients
        - dataSource: Data
          name: createClient
          request: client/createClient/createClient.req.vtl
          response: client/createClient/createClient.res.vtl
        - dataSource: Data
          name: getClientCompanyId
          request: client/shared/getClientCompanyId/getClientCompanyId.req.vtl
          response: client/shared/getClientCompanyId/getClientCompanyId.res.vtl
        - dataSource: Data
          name: updateClient
          request: client/updateClient/updateClient.req.vtl
          response: client/updateClient/updateClient.res.vtl

        # Companies
        - dataSource: Data
          name: createCompany
          request: company/createCompany/createCompany.req.vtl
          response: company/createCompany/createCompany.res.vtl
        - dataSource: Data
          name: createSettings
          request: company/createCompany/createSettings.req.vtl
          response: company/createCompany/createSettings.res.vtl
        - dataSource: Data
          name: updateCompany
          request: company/updateCompany/updateCompany.req.vtl
          response: company/updateCompany/updateCompany.res.vtl
      dataSources:
        - type: NONE
          name: Resolver
        - type: AMAZON_DYNAMODB
          name: Data
          description: Application table
          config:
            tableName: !ImportValue ${self:provider.stage}-AccountsApplicationTable
            serviceRoleArn: !GetAtt AppSyncDynamoDbServiceRole.Arn

resources:
  Resources:
    AppSyncLoggingServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-appsync-logging-service-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-logging-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'

    AppSyncDynamoDbServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-appsync-dynamodb-service-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-dynamodb-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:UpdateItem
                  Resource:
                    - !ImportValue ${self:provider.stage}-AccountsApplicationTableArn
                    - !Join
                      - ''
                      - - !ImportValue ${self:provider.stage}-AccountsApplicationTableArn
                        - '/index/__typename-data-index'
