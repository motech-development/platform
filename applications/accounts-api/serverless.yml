service:
  name: ${opt:appName, 'accounts'}
  publish: false

provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'local'}
  stackName: ${self:custom.prefix}-api

package:
  individually: true

plugins:
  - serverless-appsync-plugin
  - serverless-webpack
  - '@motech-development/serverless-outputs-env'

custom:
  prefix: ${self:service}-${self:provider.stage}
  oidc:
    issuer: https://${env:REACT_APP_AUTH0_DOMAIN, ''}/

  outputs:
    files:
      - ../accounts-client/.env.production
    env:
      AccountsproductionGraphQlApiUrl: REACT_APP_APPSYNC_URL
      AWS_REGION: REACT_APP_AWS_REGION

  appSync:
    - name: ${self:custom.prefix}
      authenticationType: OPENID_CONNECT
      openIdConnectConfig:
        issuer: ${self:custom.oidc.issuer}
      logConfig:
        loggingRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
        level: ERROR
      mappingTemplates:
        - dataSource: OpenBanking
          type: Query
          field: getBanks
          request: bank/getBanks/Query.getBanks.req.vtl
          response: bank/getBanks/Query.getBanks.res.vtl

        - kind: PIPELINE
          type: Mutation
          field: createClient
          functions:
            - address
            - addressFiltering
            - telephone
            - getClientCompanyId
            - createClient
          request: client/createClient/Mutation.createClient.req.vtl
          response: client/createClient/Mutation.createClient.res.vtl
        - dataSource: Data
          type: Mutation
          field: deleteClient
          request: client/deleteClient/Mutation.deleteClient.req.vtl
          response: client/deleteClient/Mutation.deleteClient.res.vtl
        - kind: PIPELINE
          type: Mutation
          field: updateClient
          functions:
            - address
            - addressFiltering
            - telephone
            - getClientCompanyId
            - updateClient
          request: client/updateClient/Mutation.updateClient.req.vtl
          response: client/updateClient/Mutation.updateClient.res.vtl
        - dataSource: Data
          type: Query
          field: getClient
          request: client/getClient/Query.getClient.req.vtl
          response: client/getClient/Query.getClient.res.vtl
        - dataSource: Data
          type: Query
          field: getClients
          request: client/getClients/Query.getClients.req.vtl
          response: client/getClients/Query.getClients.res.vtl

        - kind: PIPELINE
          type: Mutation
          field: createCompany
          functions:
            - address
            - addressFiltering
            - bank
            - companyNumber
            - telephone
            - vatRegistration
            - createCompany
            - createSettings
          request: company/createCompany/Mutation.createCompany.req.vtl
          response: company/createCompany/Mutation.createCompany.res.vtl
        - kind: PIPELINE
          type: Mutation
          field: deleteCompany
          functions:
            - deleteCompany
            - queueCompanyDelete
          request: company/deleteCompany/Mutation.deleteCompany.req.vtl
          response: company/deleteCompany/Mutation.deleteCompany.res.vtl
        - kind: PIPELINE
          type: Mutation
          field: updateCompany
          functions:
            - address
            - addressFiltering
            - bank
            - companyNumber
            - telephone
            - vatRegistration
            - updateCompany
          request: company/updateCompany/Mutation.updateCompany.req.vtl
          response: company/updateCompany/Mutation.updateCompany.res.vtl
        - dataSource: Data
          type: Query
          field: getCompanies
          request: company/getCompanies/Query.getCompanies.req.vtl
          response: company/getCompanies/Query.getCompanies.res.vtl
        - dataSource: Data
          type: Query
          field: getCompany
          request: company/getCompany/Query.getCompany.req.vtl
          response: company/getCompany/Query.getCompany.res.vtl

        - dataSource: Data
          type: Mutation
          field: updateSettings
          request: settings/Mutation.updateSettings.req.vtl
          response: settings/Mutation.updateSettings.res.vtl
        - dataSource: Data
          type: Query
          field: getSettings
          request: settings/Query.getSettings.req.vtl
          response: settings/Query.getSettings.res.vtl
      schema:
        - schema/address.graphql
        - schema/bank-details.graphql
        - schema/bank.graphql
        - schema/client.graphql
        - schema/company.graphql
        - schema/contact.graphql
        - schema/expense-category.graphql
        - schema/schema.graphql
        - schema/settings.graphql
        - schema/vat-settings.graphql
      functionConfigurations:
        # Validation
        - dataSource: Resolver
          name: address
          request: shared/address/Pipeline.address.req.vtl
          response: shared/address/Pipeline.address.res.vtl
        - dataSource: Resolver
          name: bank
          request: shared/bank/Pipeline.bank.req.vtl
          response: shared/bank/Pipeline.bank.res.vtl
        - dataSource: Resolver
          name: companyNumber
          request: shared/companyNumber/Pipeline.companyNumber.req.vtl
          response: shared/companyNumber/Pipeline.companyNumber.res.vtl
        - dataSource: Resolver
          name: telephone
          request: shared/telephone/Pipeline.telephone.req.vtl
          response: shared/telephone/Pipeline.telephone.res.vtl
        - dataSource: Resolver
          name: vatRegistration
          request: shared/vatRegistration/Pipeline.vatRegistration.req.vtl
          response: shared/vatRegistration/Pipeline.vatRegistration.res.vtl

        # Utilities
        - dataSource: Resolver
          name: addressFiltering
          request: shared/addressFiltering/Pipeline.addressFiltering.req.vtl
          response: shared/addressFiltering/Pipeline.addressFiltering.res.vtl

        # Clients
        - dataSource: Data
          name: createClient
          request: client/createClient/Pipeline.createClient.req.vtl
          response: client/createClient/Pipeline.createClient.res.vtl
        - dataSource: Data
          name: getClientCompanyId
          request: client/shared/getClientCompanyId/Pipeline.getClientCompanyId.req.vtl
          response: client/shared/getClientCompanyId/Pipeline.getClientCompanyId.res.vtl
        - dataSource: Data
          name: updateClient
          request: client/updateClient/Pipeline.updateClient.req.vtl
          response: client/updateClient/Pipeline.updateClient.res.vtl

        # Companies
        - dataSource: Data
          name: createCompany
          request: company/createCompany/Pipeline.createCompany.req.vtl
          response: company/createCompany/Pipeline.createCompany.res.vtl
        - dataSource: Data
          name: createSettings
          request: company/createCompany/Pipeline.createSettings.req.vtl
          response: company/createCompany/Pipeline.createSettings.res.vtl
        - dataSource: Data
          name: deleteCompany
          request: company/deleteCompany/Pipeline.deleteCompany.req.vtl
          response: company/deleteCompany/Pipeline.deleteCompany.res.vtl
        - dataSource: Lambda
          name: queueCompanyDelete
          request: company/deleteCompany/Pipeline.queueCompanyDelete.req.vtl
          response: company/deleteCompany/Pipeline.queueCompanyDelete.res.vtl
        - dataSource: Data
          name: updateCompany
          request: company/updateCompany/Pipeline.updateCompany.req.vtl
          response: company/updateCompany/Pipeline.updateCompany.res.vtl
      dataSources:
        - type: NONE
          name: Resolver
        - type: AMAZON_DYNAMODB
          name: Data
          description: Application table
          config:
            tableName: !ImportValue ${self:provider.stage}-AccountsApplicationTable
            serviceRoleArn: !GetAtt AppSyncDynamoDbServiceRole.Arn
        - type: AWS_LAMBDA
          name: Lambda
          config:
            lambdaFunctionArn: !GetAtt LambdaDataSourceLambdaFunction.Arn
            serviceRoleArn: !GetAtt AppSyncLambdaServiceRole.Arn
        - type: HTTP
          name: OpenBanking
          config:
            endpoint: !ImportValue ${self:provider.stage}-OpenBankingApiEndpoint
            authorizationConfig:
              authorizationType: AWS_IAM
              awsIamConfig:
                signingRegion: !Ref AWS::Region
                signingServiceName: execute-api
            serviceRoleArn: !GetAtt AppSyncOpenBankingServiceRole.Arn
      substitutions:
        stage: ${self:provider.stage}

  webpack:
    includeModules: true

functions:
  LambdaDataSource:
    handler: src/lambda.handler
    role: LambdaDataSourceRole
    environment:
      QUEUE_URL: !ImportValue ${self:provider.stage}-AccountsQueueUrl

resources:
  Resources:
    AppSyncOpenBankingServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-appsync-open-banking-service-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-open-banking-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource: !ImportValue ${self:provider.stage}-OpenBankingApiArn

    AppSyncLoggingServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-appsync-logging-service-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-logging-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'

    AppSyncDynamoDbServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-appsync-dynamodb-service-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-dynamodb-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:UpdateItem
                  Resource:
                    - !ImportValue ${self:provider.stage}-AccountsApplicationTableArn
                    - !Join
                      - ''
                      - - !ImportValue ${self:provider.stage}-AccountsApplicationTableArn
                        - '/index/__typename-data-index'

    AppSyncLambdaServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-appsync-lambda-service-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-appsync-lambda-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:invokeFunction
                  Resource:
                    - !GetAtt LambdaDataSourceLambdaFunction.Arn
                    - !Join
                      - ''
                      - - !GetAtt LambdaDataSourceLambdaFunction.Arn
                        - ':*'

    LambdaDataSourceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-lambda-data-source-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.prefix}-lambda-data-source-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - !ImportValue ${self:provider.stage}-AccountsQueueArn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource:
                    - 'arn:aws:logs:*:*:*'
